


First idea for the math portion of the program for end user.

Create a list with dealt cards, with either 3 or 5 like brief asks, read the card objects and use conditionals to check what operations to do.
Carry out the operation immediately, and produce an int with result.
Give user the chance to answer, compare their answer to answer already, calculated.
Display information showing if user was right or not and solution.
After this is all done, either add card objects back into shuffled pack or implement solution in a way that lets deal not actually remove from original list 
but instead just copy into new list, so that the game can carry on indefinitely.

To do the hard exercise, I need to create simple math operation methods so that depending on conditionals I can use the correct math operation.


Idea: Try to implement ( and ) to change operation order, as an even harder difficulty exercise.


Idea for interface, create a user class, then a pupil class, that inherits user class methods.





namespace OOP_assignment_2;

public abstract class Statistics
{
    protected abstract Class UserResult();
    
    protected abstract void ResultFile(int Percentage);
    protected abstract void Save(List<int> Percentage);


}

public class Stats : Statistics
{
    protected override Class UserResult(String Name, int Percentage)
    {
        
    }

    protected override void ResultFile(int Percentage)
    {
        
        List<int> PercentageList = new List<int>();
        
        
        PercentageList.Add(Percentage);
        Save(PercentageList);
        
    }
    
    protected override void Save(List<int> Percentage)
    {
        foreach (string i in Question)
        {
            
        }
    }
    
    
}